---
title: "practicaes"
author: "Santi Pérez"
date: "1/5/2022"
output: word_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r inicilization code}
library(boot)
library(lpSolve)
library(rootSolve)
library(Matrix)
library(calculus)
library(magrittr)

pokemon = read.csv("database.csv")

print("Filtrat pokemon primera generació")
pokemon2 <- pokemon[0:151,0:23]

print("Afegides columnes amb la importància de cada stat en el pokémon")
total = pokemon2$Total
pokemon2["perc_HP"] <- round((pokemon2$HP / total)*100)
pokemon2["perc_Attack"] <- round((pokemon2$Attack / total)*100)
pokemon2["perc_Defense"] <- round((pokemon2$Defense / total)*100)
pokemon2["perc_Sp_Atk"] <- round((pokemon2$Sp_Atk / total)*100)
pokemon2["perc_Sp_Def"] <- round((pokemon2$Sp_Def / total)*100)
pokemon2["perc_Speed"] <- round((pokemon2$Speed / total)*100)

pokemon3 <- pokemon[0:151,5:11]
pokemon3["Number"]       = pokemon2$Number
pokemon3["Pr_Male"]      = pokemon2$Pr_Male
pokemon3["Height_m"]     = pokemon2$Height_m
pokemon3["Weight_kg"]    = pokemon2$Weight_kg
pokemon3["Catch_Rate"]   = pokemon2$Catch_Rate
pokemon3["perc_HP"]      = pokemon2$perc_HP
pokemon3["perc_Attack"]  = pokemon2$perc_Attack
pokemon3["perc_Defense"] = pokemon2$perc_Defense
pokemon3["perc_Sp_Atk"]  = pokemon2$perc_Sp_Atk
pokemon3["perc_Sp_Def"]  = pokemon2$perc_Sp_Def
pokemon3["perc_Speed"]   = pokemon2$perc_Speed
pokemon3

```
Primerament, filtrem la base de dades amb només les columnes i files que necessitem per aquest supòsit.

```{r 1_0 inicialitzacio}
pokemon_1 <- pokemon[0:151,c(6,7,8,9,10,11,22)]
pokemon_1["HP"]     = pokemon2$HP
pokemon_1["Attack"]    = pokemon2$Attack
pokemon_1["Defense"]   = pokemon2$Defense
pokemon_1["Sp_Atk"]      = pokemon2$Sp_Atk
pokemon_1["Sp_Def"]  = pokemon2$Sp_Def
pokemon_1["Speed"] = pokemon2$Speed
pokemon_1["Catch_Rate"]      = pokemon2$Catch_Rate
```

Mostrem la matriu de variàncies i covariàncies de les variables d’aquest supòsit en el següent heatmap per fer-ho més visible.


```{r 1_1 Var_cov_matrices}
cova=cov(pokemon_1)
cova[is.na(cova)] = 0
heatmap(cova)
```

Observem que la diagonal principal és la que té els valors més alts, ja que hi ha les variàncies. El altres elements són les covariàncies. Fixant-nos amb el Catch_Rate, podem dir que té una variància molt alta (perquè tenim valors entre el 3 i 255), i hi ha poca covariància respecte les altres variables.

Ara, també veurem una matriu (també en format heatmap) que mostra la correlació entre les variables.

```{r 1_2 correlation}
corr=cor(pokemon_1)
corr[is.na(corr)] = 0
heatmap(corr)
```(corr)
```

La matriu està construïda pels coeficients de correlació de cada parella de variables. Veiem que la diagonal principal és tota d’1s.

Ara mostrem les gràfiques en què comparem la variable Catch_Rate amb les 6 estadístiques.
```{r 1_3 grafiques relacio}
print("Gràfica relació HP amb catch_rate")
plot(pokemon_1$HP,pokemon_1$Catch_Rate,type = "p", main = "Relació HP amb catch_rate", xlab = "HP", ylab = "Catch_Rate")
print("Gràfica relació atac amb catch_rate")
plot(pokemon_1$Attack,pokemon_1$Catch_Rate,type = "p", main = "Relació atac amb catch_rate", xlab = "Atac", ylab = "Catch_Rate")
print("Gràfica relació defensa amb catch_rate")
plot(pokemon_1$Defense,pokemon_1$Catch_Rate,type = "p", main = "Relació defensa amb catch_rate", xlab = "Defensa", ylab = "Catch Rate")
print("Gràfica relació atac especial amb catch_rate")
plot(pokemon_1$Sp_Atk,pokemon_1$Catch_Rate,type = "p", main = "Relació atac especial amb catch_rate", xlab = "Atac Especial", ylab = "Catch Rate")
print("Gràfica relació defensa especial amb catch_rate")
plot(pokemon_1$Sp_Def,pokemon_1$Catch_Rate,type = "p", main = "Relació defensa especial amb catch_rate", xlab = "Defensa especial", ylab = "Catch Rate")
print("Gràfica relació velocitat amb catch_rate")
plot(pokemon_1$Speed,pokemon_1$Catch_Rate,type = "p", main = "Relació velocitat amb catch_rate", xlab = "Velocitat", ylab = "Catch Rate")
```

Calculant l'Anova, podem fer la validació individual de les 6 variables independents. 

```{r 1_4 anova}
anova=aov(Catch_Rate~HP+Attack+Defense+Sp_Atk+Sp_Def+Speed,data=pokemon_1)
summary(anova)
```

Mirem el codi de significació i veiem que, amb un Pr = 0.05, totes les característiques són variables significatives. A sobre veiem que totes, excepte Speed, són, a més, significatives amb un Pr = 0.001.
Amb això, podem dir que totes les variables tenen un efecte important sobre el model, en especial HP, Attack, Defense, Sp_Atk i Sp_Def.

Pels següents apartat creem el model de regressió múltiple amb la funció lm().
```{r 1_5 model_regressio}
print("Model de Regressió Lineal Múltiple")
model_1=lm(formula=Catch_Rate~HP+Attack+Defense+Sp_Atk+Sp_Def+Speed, data=pokemon_1)
summary(model_1)
plot(model_1)
```
Observem el summary del model lineal de regressió múltiple creat per fer la validació global.

Com que el p-value és menor a 0.05 (alfa) podem dir que rebutjem la HO i acceptem la H1, o sigui, el model es vàlid. També mirem la R² ajustada i veiem que el Catch_Rate és predit un 62.86% per les nostres variables independents.


Mirant el summary, també trobem un resum sobre els residuals del model. Els residuals representen l’error que hi ha hagut (del Catch_Rate predit respecte el real) en totes les prediccions. 

Veiem que el residu (error) més gran que hi ha hagut entre les 151 Pokémon és de -138.861. També observem que a un 25% de les dades, el residu ha estat de més petit de 21.929 i a un altre 25% ha estat més gran de 32.458.

També hem plotejat la gràfica "Residuals vs Fitted" que mostra el residual que hi ha hagut i el fitted-value (que es la predicció que s'ha fet del Catch_Rate) per cada Pokémon.


Els intervals de confiança són els següents:
```{r 1_6 IC}
confint(model_1, conf.level=0.95)
```
Els intervals de confiança mostrats representen els valors entre els quals es podrien considerar les betas si es té un alfa=0.05. La de l'intercept és de la B0, HP->B1, Attack->B2... Speed->B6.

Veiem que tots els intervals són entre valors negatius, excepte el de l'atac (beta2), que arriba a acceptar valors fins a 0.182514773.


Per fer les prediccions, hem agafat alguns Pokémon d'una generació diferent a la primera, així evitem agafar Pokémon que ja estan al model. Doncs hem fet prediccions amb 3 Pokémon amb diferents Catch_Rate, un amb un valor alt, un amb un valor mitjà i l'altre amb el valor baix.

```{r 1_7 prediccions}
model_1$coefficients

prediction <- function(pok) {
  HP <- pok[6]
  Attack <- pok[7]
  Defense <- pok[8]
  Sp_Atk <- pok[9]
  Sp_Def <- pok[10]
  Speed <- pok[11]
  expected_catch_rate <- 348.5392 - 0.6639*HP - 0.1843*Attack - 0.8334*Defense - 0.5541*Sp_Atk - 1.0408*Sp_Def - 0.3518*Speed
  return(expected_catch_rate[[1]])
}

llista = c("Sentret","Raikou","Granbull")
for (name in llista) {
  pok <- pokemon[pokemon$Name == name,]
  pr <- prediction(pok)
  print(paste("Segons la nostra predicció, el Pokémon", name, "té un Catch_Rate de", round(pr)))
}
```

Per fer les prediccions, mirem els coeficients (betas) del model. Aleshores podem predir el Catch_Rate dels diferents Pokémon fent:
  348.5392 - 0.6639*HP - 0.1843*Attack - 0.8334*Defense - 0.5541*Sp_Atk - 1.0408*Sp_Def - 0.3518*Speed
  on els números són les betes, i HP,Attack...Speed són les estadístiques que depenen de cada Pokémon.
  
Com hem dit abans, com més altes siguin les estadístiques, més baix serà el Cath_Rate, és per això que les betas són negatives.

Prediccions
Sentret: Hem obtingut que el seu Catch_Rate és de 215, valor que no s'allunya molt del seu Catch_Rate real (255).
Raikou: D'aquest Pokémon llegandari hem obtingut un Catch_Rate de 2.3592 que hem aproximat a 2, valor molt proper al Cath_Rate verdader de 3.
Granbull: El Catch_rate real d'aquest Pokémon és de 75, i n'hem obtingut un de 93.




Primer filtrem la base de dades per tal de tenir els pokemon de tipus roca i electric amb el seu tipus codificat.
```{r 2_0 code}
pokemon4=pokemon[pokemon$Type_1=="Rock" | pokemon$Type_1=="Electric",]
pokemon4$Type_1 = ifelse(pokemon4$Type_1=="Rock",1,0)
pokemon4
pokemon5 <- pokemon4[0:77,c(1,3,6,7,8,9,10,11)]
pokemon5
```

Mostrem la matriu de variàncies i covariàncies de les variables d’aquest supòsit en el següent heatmap per fer-ho més visible.
```{r 2_1 code}
#Matriu de variancies i covariancies
cova=cov(pokemon5)
cova[is.na(cova)] = 0
heatmap(cova)
```
Observem que la diagonal principal és la que té els valors més alts, ja que hi ha les variàncies. El altres elements són les covariàncies. Fixant-nos amb el Number, podem dir que té una variància molt alta (perquè tenim valors entre el 25 i 719), i hi ha poca covariància respecte les altres variables.



Ara, també veurem una matriu (també en format heatmap) que mostra la correlació entre les variables.
```{r 2_2 code}
#Matriu de correlacions
corr=cor(pokemon5)
corr[is.na(corr)] = 0
heatmap(corr)
```
La matriu està construïda pels coeficients de correlació de cada parella de variables. Veiem que la diagonal principal és tota d’1s.

Ara, mitjançant l’ANOVA, farem la validació global
```{r 2_3 code}
print("Anova")
anova=aov(Type_1~HP+Attack+Defense+Sp_Atk+Sp_Def+Speed,data=pokemon4)
summary(anova)

```
Després de veure l'ANOVA ens adonem que l'atac, la defensa i l'atac especial són les estadístiques més estadísticament significatives i per tant són les que farem servir pel nostre model.


Tot seguit fem el model per regressió logística amb el tipus com variable explicada categorica i l'atac, la defensa i l'atac especial com variables explicatives.
```{r 2_4_1 code}
print("Model Regressió Logística")
modg=glm(Type_1~Attack+Defense+Sp_Atk,family = binomial, data=pokemon4)
summary(modg)
plot(modg)
```

Els intervals de confiança del intercept (Type_1) i de les 3 estadístiques del model són els següents:
```{r 2_4_2 code}
#Intervals de confiança
confint(modg)
```

Trobem els residuals del model de regressió logística
```{r 2_4_3 code}
#Residuals
summary(modg$residuals)
```

Les prediccions dels pokemons de tipus roca i electric pel model logístic
```{r 2_4_4 code}
print("Prediccions")
type=function(Atac,Defensa,Sp_Atk){res=0.2471954+1.0100938*Atac+1.0098970*Defensa+0.9854459*Sp_Atk
return(res)}

pred=predict(modg, type="response")
pred
#Matriu de confusió
clas=ifelse(pred>0.5,"1","0")
mean(clas==pokemon4$Type_1)
table(pred=clas,actual=pokemon4$Type_1)

ind=seq(1:77)
ggplot(pokemon4, aes(ind, clas))+
  geom_point(aes(color=Type_1), alpha=1, shape=4, stroke=1)+
  scale_color_gradient(low="#d8001d", high="998cff")+
  xlab("")+
  ylab("Tipus")+
  theme_bw()+
  theme(legend.position = "none")
```

Fem el model per regressió de Poisson amb el tipus com variable explicada categorica i l'atac, la defensa i l'atac especial com variables explicatives.
```{r 2_5_1 code}
print("Model Regressió Poisson")
modg2=glm(Type_1~Attack+Defense+Sp_Atk,family = poisson, data=pokemon4)
summary(modg2)
plot(modg2)
```

Els intervals de confiança del intercept (Type_1) i de les 3 estadístiques del model són els següents:
```{r 2_5_2 code}
#Intervals de confiança
confint(modg2)
```

Trobem els residuals del model de regressió de Poisson
```{r 2_5_3 code}
#Residuals
summary(modg$residuals)
summary(resid(modg))
```

Les prediccions dels pokemons de tipus roca i electric pel model de Poisson
```{r 2_5_4 code}
print("Prediccions")
type=function(Atac,Defensa,Sp_Atk){res=0.2471954+1.0100938*Atac+1.0098970*Defensa+0.9854459*Sp_Atk
return(res)}

pred2=predict(modg2, type="response")
pred
#Matriu de confusió
clas2=ifelse(pred2>0.5,"1","0")
mean(clas2==pokemon4$Type_1)
table(predicted=clas2,actual=pokemon4$Type_1)

ind2=seq(1:77)
ggplot(pokemon4, aes(ind2, clas2))+
  geom_point(aes(color=Type_1), alpha=1, shape=4, stroke=1)+
  scale_color_gradient(low="#d8001d", high="998cff")+
  xlab("")+
  ylab("Tipus")+
  theme_bw()+
  theme(legend.position = "none")
```


Grafiques
```{r 2_6 code}
#Gràfiques
print("Grafica Atack")
plot(pokemon4$Attack,pokemon4$Type_1, type = "p", xlab = "Atack", ylab = "Roca=1, Electric=0")
print("Grafica Defense")
plot(pokemon4$Defense,pokemon4$Type_1, type = "p", xlab = "Defense", ylab = "Roca=1, Electric=0")
print("Grafica Spe_Atack")
plot(pokemon4$Sp_Atk,pokemon4$Type_1, type = "p", xlab = "Special Atack", ylab = "Roca=1, Electric=0")
print("Grafica Spe_Atack")
plot(pokemon4$Sp_Def,pokemon4$Type_1, type = "p", xlab = "Special Defense", ylab = "Roca=1, Electric=0")
print("Grafica HP")
plot(pokemon4$HP,pokemon4$Type_1, type = "p", xlab = "HP", ylab = "Roca=1, Electric=0")
print("Grafica Speed")
plot(pokemon4$Speed,pokemon4$Type_1, type = "p", xlab = "Speed", ylab = "Roca=1, Electric=0")

```



Primerament, hem filtrat la base de dades quedant-nos només amb aquells Pokémon amb el tipus Psíquic o Drac.

```{r 3_0 inicialitzacio}
pokemon3=pokemon[pokemon$Type_1=="Psychic" | pokemon$Type_1=="Dragon",]
pokemon3 <- pokemon3[0:71,c(1,2,13,23)]
pokemon3
```

ANALITZAR AQUESTA TAULA

Fem l'Anova:

Creem una taula en la qual classifiquem els diferents Pokémon segons el seu cos i si són o no llegendaris
```{r 3_1 taula}
taula <- table(isLegendary=pokemon3$isLegendary, Body_Style=pokemon3$Body_Style)
taula
Y=c(17,17,3,1,3,4,5,6,6,2,0,0,1,0,2,4)
Legendary=c(0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1)
Body=c(1,2,3,4,5,6,7,8,1,2,3,4,5,6,7,8)
dataf=data.frame(Y,Body,Legendary)
dataf
```

```{r 3_2 ANOVA}
Body=factor(dataf$Body)
Legendary=factor(dataf$Legendary)
anova=aov(Y~Body+Legendary,data=dataf)
summary(anova)

bino1=glm(Legendary~Y,weights=Y,family=binomial,data=dataf)
summary(bino1)
anova(bino1,test="Chisq")

confint(bino1)
bino1$coefficients
prediccio=predict(bino1,type="response")

#Matriu de confusió
clas=ifelse(prediccio>0.5,"1","0")
mean(clas==dataf$Legendary)
table(pred=clas,actual=dataf$Legendary)

```
Anàlisi de la taula ANOVA:

Graus de llibertat: Tenim que per la variable Body_Style hi ha 7 graus de llibertat (8 possbilibles valors - 1), i per la IsLegendary tenim 1 grau de llibertat.

Amb el p-value veiem que...
